======================================================
chapter 11.
참고		:	[ _Jackie / _Map / 4_Jackie_BA_TextRender ]
				[ _Jackie / _Map / 4-2_Jackie_BA_NewFont ]
======================================================

	----------------------------
	@	텍스트란?
	----------------------------

		*	정의

			+	특정한 의도를 가지고 소통할 목적으로 생산한 모든 인공물을 이르는 용어.

				-	출처 : https://ko.wikipedia.org/wiki/%ED%85%8D%EC%8A%A4%ED%8A%B8

				-	문자, 숫자, 기호 등..


	----------------------------
	@	화면에 텍스트를 표시하는 방법.
	----------------------------

		*	[ _Jackie / _Map / 4_Jackie_BA_TextRender ] 참고.

		*	언리얼에서 텍스트를 연출하는 방법

			1)	TextRender로 출력.

				-	TextRenderer 컴포넌트를 이용하여 월드의 3차원 공간에 연출.

				-	주로 게임 실행 중 바꿀 필요없는 고정된 텍스트나 타이틀 등에 사용.

			2)	HUD로 출력.

				-	HUD( Head Up Display )로 만든후 화면의 Screen 2D  좌표계에 연출.

				-	게임실행중에 내용을 변경할 수 있는 메뉴등 게임 UI에 사용.

			3)	위젯 블프

				-	언리얼 엔진 4.4 이후 추가.

				-	게임의 UI를 디자인 하는 기능.


		*	HUD나 위젯 블프는 추후에 다룬다.

	
	
	----------------------------
	@	TextRender를 이용하여 텍스트 연출.
	----------------------------

		*	[ 블프 / 새 블프 클래스 / 액터 ]를 선택한 뒤 적당한 이름을 정해준다.

			(  BP_TextRender )

		*	BP_TextRender에 [ 컴포넌트 / 컴포넌트 추가 ]를 실행하여 Rendering / Text Render을 추가한다.

			+	Text Render의 주요 속성

				-	Text	:	화면에 출력할 내용 입력.

								<br> 또는 [Shift + Enter]를 입력하면 개행된다.

				-	Horizontal / Vertical Alignment	:	피벗( 기준점 )의 수평 / 수직 위치.

				-	Text Render Color	:	글자색.

				-	X/Y Scale	:	가로/ 세로 확대 비율.

				-	World Size	:	텍스트 렌더의 전체 크기.

				-	Horiz / Vert Spacing Adjust	:	가로 / 세로 글자사이 간격.

			+	텍스트 렌더러는 게임의 전방( x축 )을 향하고 있다.
				
				-	BP_TextRender를 씬에 배치하면 텍스트의 뒷면이 보인다.

				-	z축으로 180도 회전 시킨다.

				-	텍스트 렌더는 고정된 액터이므로 카메라 각도에 따라

					다르게 보인다.

		*	텍스트 연출 - 1 ( 빌보드 적용 )

			+	빌보드(Billboard)

				-	3D 공간상에서 오브젝트의 방향이 항상 시야 방향으로만 보이게 하는 기법.
				
				-	여러 가지 특수효과나, 나무, 이펙트, 구름 등에 적용.

				-	초기 3D게임개발시 컴퓨터의 성능이 낮을때 최적화 목적으로 주로 사용.( LOD 등 )

			+	텍스트 렌더가 항상 카메라를 향하도록 수정.

				-	텍스트 렌더 블프의 이벤트 그래프에서 작업.

				-	순서

					1)	텍스트 렌더의 위치를 구한다.

						-	텍스트 렌더가 블프액터 이므로 Get Actor Location( TextRender )을 추가한다.

					2)	카메라 위치를 구한다.

						-	"Get Player Camera Manager"로 카메라를 참조한다.
						
						-	"Return Value"을 드래그하여 "Get Actor Location"을 링크한다.

					3)	카메라 -> 텍스트렌더로 향하는 방향벡터를 구한다.

						-	방향벡터 구하는 공식.
						
							벡터A -> 벡터B	:	B - A

					4)	3)에서 구한 방향 벡터를 이용하여 회전값을 구한다.
					
						-	Make Rot from X 는 캐릭터의 Yaw 회전을 계산하는 노드
							(출처 : https://lavacat94.tistory.com/195)
						
						-	참고 : Yaw, Pitch, Roll
							( http://imsjhong.blogspot.com/2017/07/yaw-pitch-roll.html )

					5)	4)에서 구한 회전값을 텍스트 렌더의 회전값으로 사용한다.

						-	Set Actor Rotation

					6)	게임 진행중 항상 카메라를 바라봐야하므로 매프레임마다 위의 과정을

						반복해야한다.

						-	Tick 이벤트와 연결.


		*	텍스트 연출 - 2 ( 트리거 적용 )

			+	목표	:	주인공이 접근하면 나타나는 텍스트.

							[ 디테일 / Rendering / Visible ]의 토글.
				
			
			+	트리거 추가

				-	[ 컴포넌트 / 컴포넌트 추가 / Box Collision ]를 최상위 노드에 추가.

				-	이름은 Trigger로 수정.

					[ 디테일 / Shape / Box Extent ]를 (100, 100, 200)으로 수정한다.

			
			+	트리거 이벤트 추가

				-	[ 디테일 / 이벤트 /  On Compont Begin (End) Overlap ]을 각각 추가한다.

					-	Actor Begin ( End ) Overlap 노드도 같은 역할.

				-	[ 이벤트 그래프 ]에서 Set Visiblity 노드를 각각 이벤트 노드에 연결한뒤,

					New Visibility속성을 적절하게 설정하고 테스트한다.


		*	텍스트 연출 - 3 ( 한글 사용하기 )

			+	언리얼은 기본 영문 글꼴은 제공하지만 한글은 직접 설정해야함.

			+	언리얼은 비트맵 폰트를 사용.

				-	비트맵 폰트

					-	글자 하나하나를 그래픽 이미지로 만든 것.

				-	트루 타입 글꼴을 비트맵 글꼴로 변환하는 툴이 내장되어있음.

				-	영문은 알파벳 대소문자, 숫자, 특수문자 등 64 ~ 128 글자만으로도 대부분의 표현이 가능.

					한글은 표기할 수 있는 글자수가 11,172 자임.

					-	이것을 모두 비트맵으로 만들면 상당한 용량을 차지하게 됨.

					-	KS-1001( 예전 KSC-5601 )완성형 한글은 2,350자만 사용하므로 비트맵 글꼴의 용량을 

						대폭 감수 할수 있음.

						-	단 '뷁','띻'등의 단어는 표현할 수 없음.
			
			
			+	글꼴 만들기

				-	[ 참고	:	https://amored8701.tistory.com/180
								https://rgy0409.tistory.com/481#google_vignette
					]

				1)	[ Fonts 폴더 ] 생성 및 [ 폰트 ] 생성..
					-	[ Fonts 폴더 ] > [ 마우스 우클릭 ] > [ 팝업 ] > [ 유저 인터페이스 ] > [ 폰트 ].
						-	[ 이름 ]	:	[ MyFont ]

				2)	[ 폰트 에디터 ] 열기..
					-	[ 디테일 ] > [ 폰트 ] > [ Font Cache Type ]	:	[ Offline ]
						-	[ 글꼴창 ] 팝업..
							-	[ 글꼴 스타일 ]	:	[ HY동녘B ]..
								[ 크기 ]		:	[ 20 ]

				3)	[ 디테일 ] > [ 오프라인 폰트 ] > [ Import Options ] > [ 캐릭터 ]					:	[ 한글 문자셋 ( KS-1001.txt ) ] 내용 복붙..
																		> [ Texture Page Width ] /
																		  [ Texture Page Max Height ]	:	[ 1024 ]..
																		  -	비트맵으로 변환할 한글 문자셋 이미지의 크기( 단위 : 픽셀 )

				4)	[ 메뉴 ] > [ 애셋 ]> [ MyFont 리임포트 ] 실행..

				5)	[ 엔진 콘텐츠 ] > [ DefaultTextMaterialOpaque 매터리얼 ] 복제..
					-	[ 이름 ]	:	[ MyFontMaterial ]
					-	[ MyFontMaterial ] 열기..
						-	[ 디테일 ] > [ 머터리얼 표현식 폰트 샘플 ] > [ Font ]	:	[ MyFont ]
						-	[ 머터리얼 그래프 ] 수정
							-	[ Font 노드 ] > [ Red 핀 ]						---/-->		[ Lerp ] > [ Alpha ]
							-	[ Font 노드 ] > [ Alpha  핀 ( 맨 아래 핀 ..) ]	----->		[ Lerp ] > [ Alpha ]


				6)	[ 텍스트 렌더러 ]의 [ Text / Text Material ]과 [ Text / Font ]를

					각각 위에서 생성한 에셋들로 변경한뒤 테스트한다.


======================================================